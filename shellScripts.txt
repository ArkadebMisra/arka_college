#Sum of n natural numbers

echo -n "Enter n = "
read n
c=0
s=0
while [ $c -le $n ]
do
	s=`expr $s + $c`
	c=`expr $c + 1`
done
echo "Sum = $s"
----------------------------------------------------------------------
output:
arka@arka:~/shell_scripts$ bash sumN.sh
Enter n = 5
Sum = 15
--------------------------------------------------------------|||||||||||||||||||||||||||||||||||||---------------------------------------------------------


#Sum of series S = 1 + (1 + 2) + ... + (1 + 2 + 3 + ... + n)

echo -n "Enter n = "
read n
s=0
i=1
while [ $i -le $n ]
do
	j=1
	while [ $j -le $i ]
	do
		s=`expr $s + $j`
		j=`expr $j + 1`
	done
	i=`expr $i + 1`
done
echo "Sum = $s" 
----------------------------------------------------------------------
output:
arka@arka:~/shell_scripts$ bash series.sh
Enter n = 5
Sum = 35

--------------------------------------------------------------|||||||||||||||||||||||||||||||||||||---------------------------------------------------------


#To check whether a number is prime or not

echo -n "Enter the no. "
read n

f=0
i=1
while [ $i -le $n ]
do
	if [ `expr $n % $i` -eq 0 ]
	then
		f=`expr $f + 1`
	fi
	i=`expr $i + 1`
done
if [ $f -eq 2 ]
then
	echo "$n is a prime number"
else
	echo "$n is not a prime number"
fi
----------------------------------------------------------------------
output:
arka@arka:~/shell_scripts$ bash prime.sh
Enter the no. 7
7 is a prime number
arka@arka:~/shell_scripts$ bash prime.sh
Enter the no. 8
8 is not a prime number


--------------------------------------------------------------|||||||||||||||||||||||||||||||||||||---------------------------------------------------------


#Fibonacci series

echo -n "Enter the number of terms "
read n

a=0
b=1
c=0

echo "Fibonacci series : "

i=1
while [ $i -le $n ]
do
	echo "$c "
	a=$b
	b=$c
	c=`expr $a + $b`
	i=`expr $i + 1`
done
----------------------------------------------------------------------
output:
arka@arka:~/shell_scripts$ bash fibonacci.sh
Enter the number of terms 5
Fibonacci series : 
0 
1 
1 
2 
3 



--------------------------------------------------------------|||||||||||||||||||||||||||||||||||||---------------------------------------------------------

#To check if a number is a palindrome number or not

echo -n "Enter a number "
read n
sum=0
num=$n

while [ $n -gt 0 ]
do
	rem=`expr $n % 10`
	sum=`expr $sum \* 10`
	sum=`expr $sum + $rem`
	n=`expr $n / 10`
done

if [ $sum -eq $num ]
then
	echo "$num is a palindrome number"
else
	echo "$num is not a palindrome number"
fi
----------------------------------------------------------------------
output:
Enter a number 323
323 is a palindrome number
arka@arka:~/shell_scripts$ bash palindrome.sh
Enter a number 3245
3245 is not a palindrome number




--------------------------------------------------------------|||||||||||||||||||||||||||||||||||||---------------------------------------------------------



#Find the max among 3 numbers

echo -n "Enter a = "
read a
echo -n "Enter b = "
read b
echo -n "Enter c = "
read c

if [ $a -gt $b -a $a -gt $c ]
then
	echo "MAx = $a"
elif [ $b -gt $a -a $b -gt $c ]
then
	echo "Max = $b"
else
	echo "Max = $c"
fi
----------------------------------------------------------------------
output:
arka@arka:~/shell_scripts$ bash max3.sh
Enter a = 5
Enter b = 15
Enter c = 10
Max = 15


--------------------------------------------------------------|||||||||||||||||||||||||||||||||||||---------------------------------------------------------


#calculator using functions

addition () {
	c=`expr $1 + $2`
	echo "$c"
}

substraction () {
	c=`expr $1 - $2`
	echo "$c"
}

multiplication () {
	c=`expr $1 \* $2`
	echo "$c"
}

divition () {
	c=`echo "scale=2;($1 / $2)"|bc`
	echo "$c"
}


echo "Enter the 1st number"
read a

echo "Enter the second number"
read b

echo "choose what operation you wnat to perform"
echo "1. addition"
echo "2. substraction"
echo "3. multiplication"
echo "4. divition"


read n

case $n in
	1)
		res=$(addition $a $b)
		echo "The value of $a + $b = $res";;

	2)
		res=$(substraction $a $b)
		echo "The value of $a - $b = $res";;

	3)
		res=$(multiplication $a $b)
		echo "The value of $a x $b = $res";;

	4)
		res=$(divition $a $b)
		echo "The value of $a / $b = $res";;
	*)
		echo "Wrong choice";;
esac
----------------------------------------------------------------------
output:
arka@arka:~/shell_scripts$ bash calculator.sh
Enter the 1st number
4
Enter the second number
7
choose what operation you wnat to perform
1. addition
2. substraction
3. multiplication
4. divition
1
The value of 4 + 7 = 11
arka@arka:~/shell_scripts$ bash calculator.sh
Enter the 1st number
4  
Enter the second number
7
choose what operation you wnat to perform
1. addition
2. substraction
3. multiplication
4. divition
4
The value of 4 / 7 = .57
arka@arka:~/shell_scripts$ bash calculator.sh
Enter the 1st number
4
Enter the second number
7
choose what operation you wnat to perform
1. addition
2. substraction
3. multiplication
4. divition
2
The value of 4 - 7 = -3
arka@arka:~/shell_scripts$ bash calculator.sh
Enter the 1st number
4 
Enter the second number
7
choose what operation you wnat to perform
1. addition
2. substraction
3. multiplication
4. divition
3
The value of 4 x 7 = 28
arka@arka:~/shell_scripts$ bash calculator.sh
Enter the 1st number
4
Enter the second number
7
choose what operation you wnat to perform
1. addition
2. substraction
3. multiplication
4. divition
6
Wrong choice



--------------------------------------------------------------|||||||||||||||||||||||||||||||||||||---------------------------------------------------------



#To find the gcd and lcm using functions

echo -n "a="
read a
echo -n "b="
read b

gcd()
{
	if [ $1 -eq 0 ]
	then
		echo 0	
	else
		if [ `expr $2 % $1` -eq 0 -a `expr $3 % $1` -eq 0 ]
		then
			echo $1
		else
			echo $(gcd `expr $1 - 1` $a $b)
		fi
	fi
}
lcm()
{
	hcf=$(gcd $1 $1 $2)
	pro=`expr $1 \* $2`
	l=`expr $pro / $hcf`
	echo $l
}

if [ $a -lt $b ]
then
	echo "GCD = $(gcd $a $a $b)"
	echo "LCM = $(lcm $a $b)"
else
	echo "GCD = $(gcd $b $b $a)"
	echo "LCM = $(lcm $b $a)"
fi
----------------------------------------------------------------------
output:
arka@arka:~/shell_scripts$ bash fn_GcdLcm.sh
a=4   
b=6
GCD = 2
LCM = 12



--------------------------------------------------------------|||||||||||||||||||||||||||||||||||||---------------------------------------------------------


#WAP to input n number of integers and find the maximum and minimum number

i=0
echo "Enter the number of elements"
read n
echo "Enter the elements"
while [ $i -lt $n ]
do
	read -p "a[$i]=" a[$i]
	i=`expr $i + 1`
done
echo "The elements of the array: ${a[@]}"
i=0
max=${a[0]}
min=${a[0]}
for x in "${a[@]}"
do
	if [ $max -lt $x ]
	then
		max=$x
	fi
	if [ $min -gt $x ]
	then
		min=$x
	fi
done
echo "The maximum number $max"
echo "The minimum number $min"
----------------------------------------------------------------------
output:
arka@arka:~/shell_scripts$ bash arrMaxMin.sh
Enter the number of elements
5
Enter the elements
a[0]=2
a[1]=4
a[2]=1
a[3]=7
a[4]=5
The elements of the array: 2 4 1 7 5
The maximum number 7
The minimum number 1



--------------------------------------------------------------|||||||||||||||||||||||||||||||||||||---------------------------------------------------------

#Binary Search



#To perform bubble sort in an array

read -p "Enter the no. of elements " n
echo "Enter the array elements:"
i=0
while [ $i -lt $n ]
do
	read -p "a[$i]=" a[$i]
	i=`expr $i + 1`
done

sel()
{
	local -n b="$2"
	i=0
	while [ $i -lt `expr $1 - 1` ]
	do
		j=`expr $i + 1`
		min=$i
		while [ $j -lt $1 ]
		do
			if [ ${b[$min]} -gt ${b[$j]} ]
			then
				min=$j
			fi
			j=`expr $j + 1`
		done
		t=${b[$min]}
		b[$min]=${b[$i]}
		b[$i]=$t
		i=`expr $i + 1`
	done
}

sel $n a
echo "The sorted array ${a[@]}"

echo -n "Enter no. to search - "
read x

l=0
h=`expr $n - 1`
k=1

while [ $l -le $h ]
do
	mid=`expr $l + $h`
	mid=`expr $mid / 2`
  	if [ ${a[$mid]} -eq $x ]
   	then
        	echo "$x found at position `expr $mid + 1`"
		k=0
		break
	elif [ ${a[$mid]} -lt $x ]
	then
        	l=`expr $mid + 1`
	else
        	h=`expr $mid - 1`
	fi
done

----------------------------------------------------------------------
output:
arka@arka:~/shell_scripts$ bash binarySearch.sh
Enter the no. of elements 5
Enter the array elements:
a[0]=4
a[1]=2
a[2]=5
a[3]=8
a[4]=1
The sorted array 1 2 4 5 8
Enter no. to search - 4
4 found at position 3

--------------------------------------------------------------|||||||||||||||||||||||||||||||||||||---------------------------------------------------------


#To perform bubble sort in an array

read -p "Enter the no. of elements " n
echo "Enter the array elements:"
i=0
while [ $i -lt $n ]
do
	read -p "a[$i]=" a[$i]
	i=`expr $i + 1`
done
i=0
while [ $i -lt `expr $n - 1` ]
do
	j=0
	f=`expr $n - $i`
	while [ $j -lt `expr $f - 1` ]
	do
		g=`expr $j + 1`
		if [ ${a[$j]} -gt ${a[$g]} ]
		then
			t=${a[$j]}
			a[$j]=${a[$g]}
			a[$g]=$t
		fi
		j=`expr $j + 1`
	done
	i=`expr $i + 1`
done
echo "The sorted array ${a[@]}" 
----------------------------------------------------------------------
output:
arka@arka:~/shell_scripts$ bash bubSort.sh
Enter the no. of elements 5
Enter the array elements:
a[0]=2
a[1]=6
a[2]=1
a[3]=9
a[4]=4
The sorted array 1 2 4 6 9


--------------------------------------------------------------|||||||||||||||||||||||||||||||||||||---------------------------------------------------------

#Reversing a string

s="$1"

l=${#s}
i=0
ans=""

while [ $i -lt $l ]
do
	ans="${s:$i:1}$ans"
	i=$(( $i + 1 ))
done

echo "The Reverse of $s is $ans"
----------------------------------------------------------------------
output:
arka@arka:~/shell_scripts$ bash cmdRevStr.sh arkadeb
The Reverse of arkadeb is bedakra



--------------------------------------------------------------|||||||||||||||||||||||||||||||||||||---------------------------------------------------------
#To count the frequency of each vowel

echo -n "Enter a word: "
read s
#s="$1"

j=0
l=${#s}
a=0
e=0
i=0
o=0
u=0

while [ $j -lt $l ]
do
	c=${s:$j:1}
	if [ "$c" = "a" ]
	then
		a=$(( $a + 1 ))
	elif [ "$c" = "e" ]
	then
		e=$(( $e + 1 ))
	elif [ "$c" = "i" ]
	then
		i=$(( $i + 1 ))
	elif [ "$c" = "o" ]
	then
		o=$(( $o + 1 ))
	elif [ "$c" = "u" ]
	then
		u=$(( $u + 1 ))
	fi
	j=$(( $j + 1))
done

echo "a=$a"
echo "e=$e"
echo "i=$i"
echo "o=$o"
echo "u=$u"
----------------------------------------------------------------------
output:
arka@arka:~/shell_scripts$ bash vowFreq.sh
Enter a word: extraordinary
a=2
e=1
i=1
o=1
u=0




--------------------------------------------------------------|||||||||||||||||||||||||||||||||||||---------------------------------------------------------
